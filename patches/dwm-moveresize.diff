diff --git a/config.def.h b/config.def.h
index 1c0b587..46ada18 100644
--- a/config.def.h
+++ b/config.def.h
@@ -84,6 +84,14 @@ static Key keys[] = {
 	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
 	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
 	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
+	{ MODKEY,                       XK_Down,   moveresize,     {.v = (int []){ 0, 25, 0, 0 }}},
+	{ MODKEY,                       XK_Up, 	   moveresize,	   {.v = (int []){ 0, -25, 0, 0 }}},
+	{ MODKEY,                       XK_Right,  moveresize,     {.v = (int []){ 25, 0, 0, 0 }}},
+	{ MODKEY,                       XK_Left,   moveresize,     {.v = (int []){ -25, 0, 0, 0 }}},
+	{ MODKEY|ShiftMask,             XK_Down,   moveresize,     {.v = (int []){ 0, 0, 0, 25 }}},
+	{ MODKEY|ShiftMask,             XK_Up,	   moveresize,     {.v = (int []){ 0, 0, 0, -25 }}},
+	{ MODKEY|ShiftMask,             XK_Right,  moveresize,     {.v = (int []){ 0, 0, 25, 0 }}},
+	{ MODKEY|ShiftMask,             XK_Left,   moveresize,	   {.v = (int []){ 0, 0, -25, 0 }}},
 	TAGKEYS(                        XK_1,                      0)
 	TAGKEYS(                        XK_2,                      1)
 	TAGKEYS(                        XK_3,                      2)
diff --git a/dwm.c b/dwm.c
index 4465af1..028653c 100644
--- a/dwm.c
+++ b/dwm.c
@@ -183,6 +183,7 @@ static void maprequest(XEvent *e);
 static void monocle(Monitor *m);
 static void motionnotify(XEvent *e);
 static void movemouse(const Arg *arg);
+static void moveresize(const Arg *arg);
 static Client *nexttiled(Client *c);
 static void pop(Client *);
 static void propertynotify(XEvent *e);
@@ -268,6 +269,26 @@ static Drw *drw;
 static Monitor *mons, *selmon;
 static Window root, wmcheckwin;
 
+
+static void moveresize(const Arg *arg) {
+
+    XEvent ev;
+    Monitor *m = selmon;
+
+    if(!(m->sel && arg && arg->v))
+        return;
+    if(m->lt[m->sellt]->arrange && !m->sel->isfloating)
+        togglefloating(NULL);
+
+    resize(m->sel, m->sel->x + ((int *)arg->v)[0],
+            m->sel->y + ((int *)arg->v)[1],
+            m->sel->w + ((int *)arg->v)[2],
+            m->sel->h + ((int *)arg->v)[3],
+            True);
+
+    while(XCheckMaskEvent(dpy, EnterWindowMask, &ev));
+}
+
 /* configuration, allows nested code to access above variables */
 #include "config.h"
 
diff --git a/moveresize.c b/moveresize.c
new file mode 100644
index 0000000..061dd65
--- /dev/null
+++ b/moveresize.c
@@ -0,0 +1,64 @@
+void
+moveresize(const Arg *arg) {
+	/* only floating windows can be moved */
+	Client *c;
+	c = selmon->sel;
+	int x, y, w, h, nx, ny, nw, nh, ox, oy, ow, oh;
+	char xAbs, yAbs, wAbs, hAbs;
+	int msx, msy, dx, dy, nmx, nmy;
+	unsigned int dui;
+	Window dummy;
+
+	if (!c || !arg)
+		return;
+	if (selmon->lt[selmon->sellt]->arrange && !c->isfloating)
+		return;
+	if(sscanf((char *)arg->v, "%d%c %d%c %d%c %d%c", &x, &xAbs, &y, &yAbs, &w, &wAbs, &h, &hAbs) != 8)
+		return;
+	/* compute new window position; prevent window from be positioned outside the current monitor */
+	nw = c->w + w;
+	if(wAbs == 'W')
+		nw = w < selmon->mw - 2 * c->bw ? w : selmon->mw - 2 * c->bw;
+
+	nh = c->h + h;
+	if(hAbs == 'H')
+		nh = h < selmon->mh - 2 * c->bw ? h : selmon->mh - 2 * c->bw;
+
+	nx = c->x + x;
+	if(xAbs == 'X') {
+		if(x < selmon->mx)
+			nx = selmon->mx;
+		else if(x > selmon->mx + selmon->mw)
+			nx = selmon->mx + selmon->mw - nw - 2 * c->bw;
+		else
+			nx = x;
+	}
+
+	ny = c->y + y;
+	if(yAbs == 'Y') {
+		if(y < selmon->my)
+			ny = selmon->my;
+		else if(y > selmon->my + selmon->mh)
+			ny = selmon->my + selmon->mh - nh - 2 * c->bw;
+		else
+			ny = y;
+	}
+
+	ox = c->x;
+	oy = c->y;
+	ow = c->w;
+	oh = c->h;
+
+	XRaiseWindow(dpy, c->win);
+	Bool xqp = XQueryPointer(dpy, root, &dummy, &dummy, &msx, &msy, &dx, &dy, &dui);
+	resize(c, nx, ny, nw, nh, True);
+
+	/* move cursor along with the window to avoid problems caused by the sloppy focus */
+	if (xqp && ox <= msx && (ox + ow) >= msx && oy <= msy && (oy + oh) >= msy)
+	{
+		nmx = c->x - ox + c->w - ow;
+		nmy = c->y - oy + c->h - oh;
+		XWarpPointer(dpy, None, None, 0, 0, 0, 0, nmx, nmy);
+	}
+}
+
